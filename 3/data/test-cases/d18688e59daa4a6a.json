{"uid":"d18688e59daa4a6a","name":"TestCase.C360_Android.相机贴纸_字段对照_Android_PRE.贴纸详情zh_CN1.TestDispatcher#test_api","fullName":"TestCase.C360_Android.相机贴纸_字段对照_Android_PRE.贴纸详情zh_CN1.TestDispatcher#test_api","historyId":"281a34290608408c9c820776a230ddc8","time":{"start":1687746696494,"stop":1687746696494,"duration":0},"description":"00083_\"贴纸icon AB-gid\":2组数据比较","descriptionHtml":"<p>00083_&quot;贴纸icon AB-gid&quot;:2组数据比较</p>\n","status":"failed","statusMessage":"AssertionError: 断言：参数获取失败\r\n   Error: 'QACMPDATA1'\nassert False","statusTrace":"self = <APITesting.TestCase.C360_Android.相机贴纸_字段对照_Android_PRE.贴纸详情zh_CN1.TestDispatcher object at 0x7fdef05ad310>, name = '00083_\"贴纸icon AB-gid\":2组数据比较', priority = 5\nencryption = 0, sig = 0, env = 'QA', method = 'POST', url = '', headers = {}, params = {}, expected = KeyError('QACMPDATA1'), export = 'NULL'\n\n    @pytest.mark.parametrize(\"name, priority, encryption, sig, env, method, url, headers, params, expected, export\",\n                             test_data)\n    def test_api(self, name, priority, encryption, sig, env, method, url, headers, params, expected, export):\n    \n        allure.dynamic.story(\"{i}\".format(i=name))  # 设置用例story名\n        allure.dynamic.severity(serverity[(priority - 1) if priority <= 5 else 4])  # 设置用例优先级\n        allure.dynamic.title(\"{i}\".format(i=url))  # 设定用例标题\n        allure.dynamic.description(\"{i}\".format(i=name))  # 设定用例描述\n    \n        Log.logger(\"开始执行用例：\" + str(name))\n        Log.logger(\"Request url:\" + str(url))\n    \n        # 获取Global_Var参数\n        self.set_globalVar()\n    \n        # 当url不为NULL 与 ${key}\n        url_re = re.findall(r'(\\$\\{\\w+\\})', url)\n    \n        # url_re2 = re.match(r'^https?://([0-9a-zA-Z\\-._]*\\/)*', url)\n        # 修复 url链接中带有参数的情况\n        url_re2 = re.match(r'^https?://([\\w\\-.=${}&?]*\\/*)*', url)\n    \n        # 若 url 不为纯参数（如：非${QADATA}）\n        if url_re2:\n            # 当url中带有参数时，给url添加参数\n            if url_re:\n                urs_flag, url = self.set_url(url)\n                if not urs_flag:\n                    assert False, \"url：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            # 设置请求头、请求体\n            # 设置 var ${}参数\n            hrs_flag, headers = self.set_headers(headers)\n            prs_flag, params = self.set_parmars(params)\n    \n            if not hrs_flag:\n                assert False, \"请求头headers：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            elif not prs_flag:\n                assert False, \"请求体params：参数获取失败\\r\\n Error: {a}\".format(a=params)\n    \n            # 设置签名\n            headers, params = self.set_sig(method, url, headers, params, sig, env)\n    \n            # 设置 header 中Content_length\n            # headers = self.set_content_length(headers, params)\n    \n            # Log.logger(\"Request Headers:\" + str(headers))\n            # Log.logger(\"Request Body:\" + str(params))\n    \n            # 发起请求\n            data = self.request(url=url, method=method, params=params, encryption=encryption,\n                                headers=headers, timeout=timeout)\n            if not isinstance(data, str):\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '返回结果：', attachment_type=allure.attachment_type.HTML)\n                assert False, data\n    \n        elif url != \"\" and url_re:\n            d_res, data = self.set_data(url_re[0])\n            if not d_res:\n                assert False, \"通过host参数获取 response伪数据失败\\r\\n Error: {a}\".format(a=data)\n    \n            if not isinstance(data, str):\n                # Log.logger(\"Get Body:\" + str(data))\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # Log.logger(\"目前参数情况：---- %s\" % str(obj.var))\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '断言结果：', attachment_type=allure.attachment_type.HTML)\n                assert False, data\n    \n        elif url == \"\":\n            # 设置断言参数\n            exp_flag, expected = self.set_expected(expected)\n            if not exp_flag:\n>               assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\nE               AssertionError: 断言：参数获取失败\r\nE                  Error: 'QACMPDATA1'\nE               assert False\n\nTestCase/C360_Android/相机贴纸_字段对照_Android_PRE/贴纸详情zh_CN1.py:348: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"assert_msg","time":{"start":1687746411787,"stop":1687746411787,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"app","time":{"start":1687746411787,"stop":1687746411787,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"log_level","time":{"start":1687746411788,"stop":1687746411788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"modules","time":{"start":1687746411788,"stop":1687746411788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"timeout","time":{"start":1687746411788,"stop":1687746411788,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"class_logging","time":{"start":1687746690822,"stop":1687746690823,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_xunit_setup_class_fixture_TestDispatcher","time":{"start":1687746690822,"stop":1687746690822,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"method_logging","time":{"start":1687746696493,"stop":1687746696493,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"00083_\"贴纸icon AB-gid\":2组数据比较","status":"failed","statusMessage":"AssertionError: 断言：参数获取失败\r\n   Error: 'QACMPDATA1'\nassert False","statusTrace":"self = <APITesting.TestCase.C360_Android.相机贴纸_字段对照_Android_PRE.贴纸详情zh_CN1.TestDispatcher object at 0x7fdef05ad310>, name = '00083_\"贴纸icon AB-gid\":2组数据比较', priority = 5\nencryption = 0, sig = 0, env = 'QA', method = 'POST', url = '', headers = {}, params = {}, expected = KeyError('QACMPDATA1'), export = 'NULL'\n\n    @pytest.mark.parametrize(\"name, priority, encryption, sig, env, method, url, headers, params, expected, export\",\n                             test_data)\n    def test_api(self, name, priority, encryption, sig, env, method, url, headers, params, expected, export):\n    \n        allure.dynamic.story(\"{i}\".format(i=name))  # 设置用例story名\n        allure.dynamic.severity(serverity[(priority - 1) if priority <= 5 else 4])  # 设置用例优先级\n        allure.dynamic.title(\"{i}\".format(i=url))  # 设定用例标题\n        allure.dynamic.description(\"{i}\".format(i=name))  # 设定用例描述\n    \n        Log.logger(\"开始执行用例：\" + str(name))\n        Log.logger(\"Request url:\" + str(url))\n    \n        # 获取Global_Var参数\n        self.set_globalVar()\n    \n        # 当url不为NULL 与 ${key}\n        url_re = re.findall(r'(\\$\\{\\w+\\})', url)\n    \n        # url_re2 = re.match(r'^https?://([0-9a-zA-Z\\-._]*\\/)*', url)\n        # 修复 url链接中带有参数的情况\n        url_re2 = re.match(r'^https?://([\\w\\-.=${}&?]*\\/*)*', url)\n    \n        # 若 url 不为纯参数（如：非${QADATA}）\n        if url_re2:\n            # 当url中带有参数时，给url添加参数\n            if url_re:\n                urs_flag, url = self.set_url(url)\n                if not urs_flag:\n                    assert False, \"url：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            # 设置请求头、请求体\n            # 设置 var ${}参数\n            hrs_flag, headers = self.set_headers(headers)\n            prs_flag, params = self.set_parmars(params)\n    \n            if not hrs_flag:\n                assert False, \"请求头headers：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            elif not prs_flag:\n                assert False, \"请求体params：参数获取失败\\r\\n Error: {a}\".format(a=params)\n    \n            # 设置签名\n            headers, params = self.set_sig(method, url, headers, params, sig, env)\n    \n            # 设置 header 中Content_length\n            # headers = self.set_content_length(headers, params)\n    \n            # Log.logger(\"Request Headers:\" + str(headers))\n            # Log.logger(\"Request Body:\" + str(params))\n    \n            # 发起请求\n            data = self.request(url=url, method=method, params=params, encryption=encryption,\n                                headers=headers, timeout=timeout)\n            if not isinstance(data, str):\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '返回结果：', attachment_type=allure.attachment_type.HTML)\n                assert False, data\n    \n        elif url != \"\" and url_re:\n            d_res, data = self.set_data(url_re[0])\n            if not d_res:\n                assert False, \"通过host参数获取 response伪数据失败\\r\\n Error: {a}\".format(a=data)\n    \n            if not isinstance(data, str):\n                # Log.logger(\"Get Body:\" + str(data))\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # Log.logger(\"目前参数情况：---- %s\" % str(obj.var))\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '断言结果：', attachment_type=allure.attachment_type.HTML)\n                assert False, data\n    \n        elif url == \"\":\n            # 设置断言参数\n            exp_flag, expected = self.set_expected(expected)\n            if not exp_flag:\n>               assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\nE               AssertionError: 断言：参数获取失败\r\nE                  Error: 'QACMPDATA1'\nE               assert False\n\nTestCase/C360_Android/相机贴纸_字段对照_Android_PRE/贴纸详情zh_CN1.py:348: AssertionError","steps":[{"name":"step1: 获取Global_Var参数","time":{"start":1687746696494,"stop":1687746696494,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"b93cf476734f4ccb","name":"8b2e2e68-ddcb-49e1-b9df-37cda930d36a-attachment.html","source":"b93cf476734f4ccb.html","type":"text/html","size":57}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"step8: 设置<断言>中的参数","time":{"start":1687746696494,"stop":1687746696494,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"expected","value":"[{'cmp': ['[\"${QACMPKEY68}\",\"${QACMPKEY69}\"]', '{\"value1\":${QACMPDATA1},\"value2\":${QACMPDATA2},\"cmp_list_seq\":\"\",\"cmp_file\":\"\",\"cmp_filename\":\"\",\"cmp_listlength\":\"\",\"value_map\":\"\",\"value_map_type\":\"\"}']}]"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"5a357f3622b53bad","name":"log","source":"5a357f3622b53bad.txt","type":"text/plain","size":420}],"parameters":[],"stepsCount":2,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"class_logging::0","time":{"start":1687746696502,"stop":1687746696502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"method_logging::0","time":{"start":1687746696502,"stop":1687746696502,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_xunit_setup_class_fixture_TestDispatcher::0","time":{"start":1687746696503,"stop":1687746696511,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"00083_\"贴纸icon AB-gid\":2组数据比较"},{"name":"severity","value":"blocker"},{"name":"feature","value":"相机贴纸_字段对照_Android_PRE"},{"name":"parentSuite","value":"TestCase.C360_Android.相机贴纸_字段对照_Android_PRE"},{"name":"suite","value":"贴纸详情zh_CN1"},{"name":"subSuite","value":"TestDispatcher"},{"name":"host","value":"wangxiangyudeMacBook-Pro.local"},{"name":"thread","value":"45501-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.C360_Android.相机贴纸_字段对照_Android_PRE.贴纸详情zh_CN1"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"encryption","value":"0"},{"name":"env","value":"'QA'"},{"name":"expected","value":"[{'cmp': ['[\"${QACMPKEY68}\",\"${QACMPKEY69}\"]', '{\"value1\":${QACMPDATA1},\"value2\":${QACMPDATA2},\"cmp_list_seq\":\"\",\"cmp_file\":\"\",\"cmp_filename\":\"\",\"cmp_listlength\":\"\",\"value_map\":\"\",\"value_map_type\":\"\"}']}]"},{"name":"export","value":"'NULL'"},{"name":"headers","value":"{}"},{"name":"method","value":"'POST'"},{"name":"name","value":"'00083_\"贴纸icon AB-gid\":2组数据比较'"},{"name":"params","value":"{}"},{"name":"priority","value":"5"},{"name":"sig","value":"0"},{"name":"url","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"29284ac05306ea02","reportUrl":"https://pinguo-wangxiangyu.github.io/ApiTesting/1//#testresult/29284ac05306ea02","status":"passed","time":{"start":1687690894881,"stop":1687690894917,"duration":36}}]},"tags":[]},"source":"d18688e59daa4a6a.json","parameterValues":["0","'QA'","[{'cmp': ['[\"${QACMPKEY68}\",\"${QACMPKEY69}\"]', '{\"value1\":${QACMPDATA1},\"value2\":${QACMPDATA2},\"cmp_list_seq\":\"\",\"cmp_file\":\"\",\"cmp_filename\":\"\",\"cmp_listlength\":\"\",\"value_map\":\"\",\"value_map_type\":\"\"}']}]","'NULL'","{}","'POST'","'00083_\"贴纸icon AB-gid\":2组数据比较'","{}","5","0","''"]}