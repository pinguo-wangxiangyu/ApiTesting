{"status": "failed", "statusDetails": {"message": "AssertionError: 断言：参数获取失败\r\n   Error: 'QACMPDATA1'\nassert False", "trace": "self = <APITesting.TestCase.C360_Android.相机贴纸_字段对照_Android_PRE.贴纸详情zh_CN1.TestDispatcher object at 0x7fdef05e9730>, name = '00058_\"贴纸名称\":2组数据比较', priority = 5\nencryption = 0, sig = 0, env = 'QA', method = 'POST', url = '', headers = {}, params = {}, expected = KeyError('QACMPDATA1'), export = 'NULL'\n\n    @pytest.mark.parametrize(\"name, priority, encryption, sig, env, method, url, headers, params, expected, export\",\n                             test_data)\n    def test_api(self, name, priority, encryption, sig, env, method, url, headers, params, expected, export):\n    \n        allure.dynamic.story(\"{i}\".format(i=name))  # 设置用例story名\n        allure.dynamic.severity(serverity[(priority - 1) if priority <= 5 else 4])  # 设置用例优先级\n        allure.dynamic.title(\"{i}\".format(i=url))  # 设定用例标题\n        allure.dynamic.description(\"{i}\".format(i=name))  # 设定用例描述\n    \n        Log.logger(\"开始执行用例：\" + str(name))\n        Log.logger(\"Request url:\" + str(url))\n    \n        # 获取Global_Var参数\n        self.set_globalVar()\n    \n        # 当url不为NULL 与 ${key}\n        url_re = re.findall(r'(\\$\\{\\w+\\})', url)\n    \n        # url_re2 = re.match(r'^https?://([0-9a-zA-Z\\-._]*\\/)*', url)\n        # 修复 url链接中带有参数的情况\n        url_re2 = re.match(r'^https?://([\\w\\-.=${}&?]*\\/*)*', url)\n    \n        # 若 url 不为纯参数（如：非${QADATA}）\n        if url_re2:\n            # 当url中带有参数时，给url添加参数\n            if url_re:\n                urs_flag, url = self.set_url(url)\n                if not urs_flag:\n                    assert False, \"url：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            # 设置请求头、请求体\n            # 设置 var ${}参数\n            hrs_flag, headers = self.set_headers(headers)\n            prs_flag, params = self.set_parmars(params)\n    \n            if not hrs_flag:\n                assert False, \"请求头headers：参数获取失败\\r\\n Error: {a}\".format(a=headers)\n    \n            elif not prs_flag:\n                assert False, \"请求体params：参数获取失败\\r\\n Error: {a}\".format(a=params)\n    \n            # 设置签名\n            headers, params = self.set_sig(method, url, headers, params, sig, env)\n    \n            # 设置 header 中Content_length\n            # headers = self.set_content_length(headers, params)\n    \n            # Log.logger(\"Request Headers:\" + str(headers))\n            # Log.logger(\"Request Body:\" + str(params))\n    \n            # 发起请求\n            data = self.request(url=url, method=method, params=params, encryption=encryption,\n                                headers=headers, timeout=timeout)\n            if not isinstance(data, str):\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '返回结果：', attachment_type=allure.attachment_type.HTML)\n                assert False, data\n    \n        elif url != \"\" and url_re:\n            d_res, data = self.set_data(url_re[0])\n            if not d_res:\n                assert False, \"通过host参数获取 response伪数据失败\\r\\n Error: {a}\".format(a=data)\n    \n            if not isinstance(data, str):\n                # Log.logger(\"Get Body:\" + str(data))\n    \n                # 获取返回中的数据供后续用例使用\n                grs_flag, e_msg = self.get_var_from_response(copy.deepcopy(export), data)\n                if not grs_flag:\n                    assert False, \"从返回数据中提取参数失败\\r\\n Error: {a}\".format(a=e_msg)\n    \n                # Log.logger(\"目前参数情况：---- %s\" % str(obj.var))\n    \n                # 设置断言参数\n                exp_flag, expected = self.set_expected(expected)\n                if not exp_flag:\n                    assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\n    \n                # 断言\n                self.mul_assert(data, expected)\n            else:\n                allure.attach(data, '断言结果：', attachment_type=allure.attachment_type.HTML)\n                assert False, data\n    \n        elif url == \"\":\n            # 设置断言参数\n            exp_flag, expected = self.set_expected(expected)\n            if not exp_flag:\n>               assert False, \"断言：参数获取失败\\r\\n Error: {a}\".format(a=expected)\nE               AssertionError: 断言：参数获取失败\r\nE                  Error: 'QACMPDATA1'\nE               assert False\n\nTestCase/C360_Android/相机贴纸_字段对照_Android_PRE/贴纸详情zh_CN1.py:348: AssertionError"}, "description": "00058_\"贴纸名称\":2组数据比较", "steps": [{"name": "step1: 获取Global_Var参数", "status": "passed", "attachments": [{"source": "0a7c7b5c-e105-4473-8b7b-f7ad296d70db-attachment.html", "type": "text/html"}], "start": 1687746696229, "stop": 1687746696229}, {"name": "step8: 设置<断言>中的参数", "status": "passed", "parameters": [{"name": "expected", "value": "[{'cmp': ['[\"${QACMPKEY18}\",\"${QACMPKEY19}\"]', '{\"value1\":${QACMPDATA1},\"value2\":${QACMPDATA2},\"cmp_list_seq\":\"\",\"cmp_file\":\"\",\"cmp_filename\":\"\",\"cmp_listlength\":\"\",\"value_map\":[[\"*\", \"*\"]],\"value_map_type\":[\"str\", \"str\"]}']}]"}], "start": 1687746696229, "stop": 1687746696229}], "attachments": [{"name": "log", "source": "230c1026-c0c7-4813-96d5-fdea90bc9532-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "name", "value": "'00058_\"贴纸名称\":2组数据比较'"}, {"name": "priority", "value": "5"}, {"name": "encryption", "value": "0"}, {"name": "sig", "value": "0"}, {"name": "env", "value": "'QA'"}, {"name": "method", "value": "'POST'"}, {"name": "url", "value": "''"}, {"name": "headers", "value": "{}"}, {"name": "params", "value": "{}"}, {"name": "expected", "value": "[{'cmp': ['[\"${QACMPKEY18}\",\"${QACMPKEY19}\"]', '{\"value1\":${QACMPDATA1},\"value2\":${QACMPDATA2},\"cmp_list_seq\":\"\",\"cmp_file\":\"\",\"cmp_filename\":\"\",\"cmp_listlength\":\"\",\"value_map\":[[\"*\", \"*\"]],\"value_map_type\":[\"str\", \"str\"]}']}]"}, {"name": "export", "value": "'NULL'"}], "start": 1687746696229, "stop": 1687746696229, "uuid": "33afc267-dea3-4a1f-9393-59d01a5fce2e", "historyId": "44b3b76eae760441b283649a3aac7b46", "testCaseId": "1c91a39e1841d4e80f879e89bef33431", "fullName": "TestCase.C360_Android.相机贴纸_字段对照_Android_PRE.贴纸详情zh_CN1.TestDispatcher#test_api", "labels": [{"name": "story", "value": "00058_\"贴纸名称\":2组数据比较"}, {"name": "severity", "value": "blocker"}, {"name": "feature", "value": "相机贴纸_字段对照_Android_PRE"}, {"name": "parentSuite", "value": "TestCase.C360_Android.相机贴纸_字段对照_Android_PRE"}, {"name": "suite", "value": "贴纸详情zh_CN1"}, {"name": "subSuite", "value": "TestDispatcher"}, {"name": "host", "value": "wangxiangyudeMacBook-Pro.local"}, {"name": "thread", "value": "45501-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.C360_Android.相机贴纸_字段对照_Android_PRE.贴纸详情zh_CN1"}]}